{"version":3,"sources":["components/HowTo/HowTo.js","components/Score/Socre.js","components/CreatedBy/CreatedBy.js","components/Win/Win.js","components/rudrata-chess-diagram/board.js","components/rudrata-chess-diagram/piece.js","components/rudrata-chess-diagram/pieceDefinitions.js","components/rudrata-chess-diagram/BoardContainer.js","components/rudrata-chess-diagram/chessdiagram.js","App.js","reportWebVitals.js","index.js"],"names":["HowTo","Container","id","data-testid","style","fontSize","className","this","props","altBackground","Component","Score","Col","Badge","variant","currentScore","Math","pow","order","CreatedBy","href","target","rel","Win","width","useWindowSize","height","document","body","clientHeight","Square","fillColor","light","lightSquareColor","darkSquareColor","fill","squareSize","x","y","displayName","SquareHighlight","stroke","highlightColor","strokeWidth","defaultProps","Board","square","flip","files","toLowerCase","charCodeAt","Number","slice","ranks","file","rank","index","floor","nextProps","selectedSquare","squares","_fileRankToCoords","push","map","i","_indexToSquare","Object","keys","highlights","_squareToCoords","Piece","pieceType","scale","transformString","drawPiece","React","pieceDefs","transform","d","fillOpacity","BoardContainer","state","selectedPieceType","dragX","dragY","isDragging","left","top","_onResize","bind","_onScroll","_getClientPos","window","addEventListener","removeEventListener","evt","Event","dispatchEvent","preventDefault","clientX","clientY","_grab","touches","_move","_release","String","fromCharCode","boardW","boardH","_coordsToSquare","selectedPiece","_getPieceAtSquare","setState","onSelectSquare","finalSquare","onMovePiece","rect","Client","getBoundingClientRect","pieces","pieceString","split","isNaN","fields","fen","pieceDefinitions","assign","standardPieceDefinitions","pieceChars","RegExp","join","replace","reduce","accum","c","test","toString","isInteger","parseInt","_getPiecesFromFEN","_getPieces","filter","pieceLocation","ref","svg","display","marginBottom","onMouseDown","_onMouseDown","onMouseMove","_onMouseMove","onTouchEnd","_onTouchEnd","onTouchMove","_onTouchMove","onTouchStart","_onTouchStart","onMouseUp","_onMouseUp","piece","allowedMoves","Chessdiagram","moves","Array","isArray","pgn","getFensFromPgn","currentMove","startMove","from","to","allowMoves","halfMove","_onMovePiece","newlineChar","pgnHeight","App","diagramDimensions","seqNumber","tourSeq","helpAltBackground","handleClear","handleMove","handleHowTo","handleUpdate","move","includes","placeKnight","prevMove","pop","checkLegalMove","querySelector","scrollIntoView","setTimeout","legalMoves","files_re","move_x","indexOf","move_y","prevMove_x","prevMove_y","isLegal","sequence","event","attributes","value","lastSquareName","positionDescriptor","sq","Fragment","Row","col","fluid","onClick","icon","faArrowRight","ButtonToolbar","Button","size","Dropdown","block","Toggle","Menu","Item","data-order","Divider","bounds","onResize","contentRect","measureRef","min","name","role","faPiggyBank","faCode","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f17a66bb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nclass HowTo extends Component {\n  render() {\n    return (\n      <>\n        <Container\n          id=\"how-to\"\n          data-testid='how-to'\n          style={{ fontSize: \"1.5em\" }}\n          className={\n            this.props.altBackground === true\n              ? \"bg-success text-light bg-transition p-2\"\n              : \" bg-transition p-2\"\n          }\n        >\n          <strong>How To Play</strong>\n          <br />\n          <p>\n            <strong>Click on any square</strong> to place a knight and start the\n            game. Your goal is to <strong>visit each square</strong> on the\n            chessboard <strong>exactly once</strong>.\n          </p>\n          <p>\n            Click on any square to move the knight to it. As in chess, the\n            knight may only move in an \"L\" shape:{\" \"}\n            <strong>two squares vertically and one horizontally</strong>, or{\" \"}\n            <strong>two squares horizontally and one square vertically</strong>.\n          </p>\n\n          <p>If you are able to tour the entire chess board, <strong>something mysterious might happen!</strong></p>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default HowTo;\n","\nimport React from \"react\";\nimport {Badge, Col } from 'react-bootstrap';\n\nexport default function Score(props){\n        return(\n            <div data-testid='scoreboard' className='h4 rounded col-12'>\n            \n                <Col className='font-weight-bold rounded d-flex flex-column pb-2 bg-success'> \n                <p className='text-light text-center'>Score</p>\n                <Badge variant='success' className='font-weight-bold'>{props.currentScore}/{Math.pow(props.order, 2)}</Badge>\n                </Col>   \n             \n            </div>\n        );\n    }","import { Container } from \"react-bootstrap\";\n\nfunction CreatedBy() {\n  return (\n    <>\n      <Container id=\"created-by\" data-testid='created-by' style={{ fontSize: \"1.5em\" }}>\n        <p>\n          Created by{\" \"}\n          <a\n            href=\"https://github.com/OulipianSummer\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Andrew Benbow\n          </a>\n          . UI design inspired by{\" \"}\n          <a href=\"https://play2048.co/\" target=\"_blank\" rel=\"noreferrer\">\n            2048\n          </a>{\" \"}\n          by{\" \"}\n          <a\n            href=\"https://twitter.com/gabrielecirulli?lang=en\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Gabriele Cirulli\n          </a>\n          .\n        </p>\n      </Container>\n    </>\n  );\n}\n\nexport default CreatedBy;\n","import React from 'react'\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport Confetti from 'react-confetti'\n \nexport default function Win(){\n  const { width } = useWindowSize();\n  return (\n    <Confetti\n      className='confetti'\n      width={width}\n      height={document.body.clientHeight}\n    />\n  )\n}\n ","/*\n\nMIT License\n\nCopyright (c) 2016 Judd Niemann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n\n/*\n *=================================================================================================\n * Modified in 2020 by Andrew Benbow for use in Rudrata web app\n * 1. Removed stroke width and color\n * 2. Removed the font family property in render so that the fonts resort to style defaults\n * 3. Updated default highlight color\n * 4. Removed rank and file labels\n * 5. Addded a test id to the squares\n *=================================================================================================\n */\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Square extends Component {\n\trender() {\n\t\tlet fillColor = this.props.light ? this.props.lightSquareColor : this.props.darkSquareColor;\n\t\treturn (\n\t\t\t<rect\n\t\t\t\tfill={fillColor}\n\t\t\t\tdata-testid = \"chess_board_square\"\n\t\t\t\theight={this.props.squareSize}\n\t\t\t\t//Removed stroke=\"black\"\n\t\t\t\t//strokeWidth=\"1\"\n\t\t\t\twidth={this.props.squareSize}\n\t\t\t\tx={this.props.x}\n\t\t\t\ty={this.props.y}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nSquare.propTypes = {\n\tdarkSquareColor: PropTypes.string.isRequired,\n\tlight: PropTypes.bool.isRequired,\n\tlightSquareColor: PropTypes.string.isRequired,\n\tsquareSize: PropTypes.number.isRequired,\n\tx: PropTypes.number.isRequired,\n\ty: PropTypes.number.isRequired,\n};\nSquare.displayName = 'Square';\n\nclass SquareHighlight extends Component {\n\trender() {\n\t\treturn <rect x={this.props.x} y={this.props.y} width={this.props.squareSize} height={this.props.squareSize} stroke={this.props.highlightColor} fill=\"none\" strokeWidth=\"3\" />;\n\t}\n}\n\nSquareHighlight.propTypes = {\n\thighlightColor: PropTypes.string.isRequired,\n\tsquareSize: PropTypes.number.isRequired,\n\tx: PropTypes.number.isRequired,\n\ty: PropTypes.number.isRequired,\n};\n\nSquareHighlight.defaultProps = {\n\thighlightColor: '' // Changed\n};\n\n\n/** Board : draws a chess board with given square size, square colors, and number of files and ranks */\nclass Board extends Component {\n\n\t\t// coordinate conversion functions ////\n\n\t_squareToCoords(square) { // convert a square name (eg 'e4') to coordinates\n\t\tif(this.props.flip) {\n\t\t\tlet x = this.props.squareSize * (this.props.files - (square.toLowerCase().charCodeAt(0)-97));\n\t\t\tlet y = (Number(square.slice(1))-1) * this.props.squareSize;\n\t\t\treturn [x,y];\n\t\t} else {\n\t\t\tlet x = this.props.squareSize * (1 + square.toLowerCase().charCodeAt(0)-97);\n\t\t\tlet y = (this.props.ranks-Number(square.slice(1))) * this.props.squareSize;\n\t\t\treturn [x,y];\n\t\t}\n\t}\n\n\t_fileRankToCoords(file, rank) { // convert zero-based file and rank values to coordinates\n\t\tif(this.props.flip) {\n\t\t\tlet\tx = this.props.squareSize * (this.props.files - file);\n\t\t\tlet y = this.props.squareSize * rank;\n\t\t\treturn [x,y];\n\t\t} else {\n\t\t\tlet\tx = this.props.squareSize * (1 + file);\n\t\t\tlet y = this.props.squareSize * (this.props.ranks - rank -1);\n\t\t\treturn [x,y];\n\t\t}\n\t}\n\n\t// 0-based index to algebraic notation (0 == 'a1', 1 == 'a2', ... 63 == 'h8' on an 8x8)\n\t_indexToSquare(index) {\n\t\tconst file = \"abcdefghijklmno\"[Math.floor(index / this.props.files)];\n\t\tconst rank = (index % this.props.files) + 1;\n\t\treturn file + rank;\n\t}\n\n\tshouldComponentUpdate(nextProps) {\n\t\treturn ( // note: put most likely changes towards the top ...\n\t\t\tnextProps.selectedSquare !== this.props.selectedSquare ||\n\t\t\tnextProps.flip !== this.props.flip ||\n\t\t\tnextProps.squareSize !== this.props.squareSize ||\n\t\t\tnextProps.lightSquareColor !== this.props.lightSquareColor ||\n\t\t\tnextProps.darkSquareColor !== this.props.darkSquareColor ||\n\t\t\tnextProps.ranks !== this.props.ranks ||\n\t\t\tnextProps.files !== this.props.files\n\t\t);\n\t}\n\n\t// the render() function\n\n\trender() {\n\t\tlet squares = [];\n\n\t\t// push coordinates into array\n\t\tfor (let file=0; file < this.props.files; file++){\n\t\t\tfor (let rank=0; rank < this.props.ranks; rank++) {\n\t\t\t\tlet [x,y] = this._fileRankToCoords(file, rank);\n\t\t\t\tsquares.push({x: x, y: y, light: (file ^ rank) & 1});\n\t\t\t}\n\t\t}\n\t\treturn (\n\n\t\t\t<svg>\n\t\t\t\t{squares.map((square,i) =>\n\t\t\t\t\t<Square\n\t\t\t\t\t\tid={this._indexToSquare(i)}\n\t\t\t\t\t\tsquare={this._indexToSquare(i)}\n\t\t\t\t\t\tx={square.x} y={square.y} key={i} light={!!square.light} squareSize={this.props.squareSize}\n\t\t\t\t\t\tlightSquareColor={this.props.lightSquareColor} darkSquareColor={this.props.darkSquareColor}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{Object.keys(this.props.highlights).map(square => {\n\t\t\t\t\tconst [x, y] = this._squareToCoords(square);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<SquareHighlight\n\t\t\t\t\t\t\tkey={square}\n\t\t\t\t\t\t\thighlightColor={this.props.highlights[square]}\n\t\t\t\t\t\t\tsquareSize={this.props.squareSize}\n\t\t\t\t\t\t\tx={x}\n\t\t\t\t\t\t\ty={y}\n\t\t\t\t\t\t/>);\n\t\t\t\t})}\n\t\t\t</svg>\n\t\t);\n\t}\n}\n\nBoard.propTypes = {\n\tdarkSquareColor: PropTypes.string.isRequired,\n\tfiles: PropTypes.number.isRequired,\n\tflip: PropTypes.bool.isRequired,\n\thighlights: PropTypes.object,\n\tlightSquareColor: PropTypes.string.isRequired,\n\tranks: PropTypes.number.isRequired,\n\tselectedSquare: PropTypes.string,\n\tsquareSize: PropTypes.number.isRequired,\n};\n\nBoard.defaultProps = {\n\tdarkSquareColor:  \"#005EBB\",\n\tfiles: 8,\n\tflip: false,\n\thighlights: {},\n\tlightSquareColor: \"#2492FF\",\n\tranks: 8,\n\tsquareSize: 45,\n};\n\nexport default Board;\n","/*\n\nMIT License\n\nCopyright (c) 2016 Judd Niemann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n\n\n\n//////////////////////////////////////////////////////////////////////////\n//  Modified in 2020 by Andrew Benbow for use in the Rudrata web app\n//  1. Removed the piece.css file, since we will not use it\n//\n////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\n/** Piece: renders an svg chess piece of a given type and position */\nclass Piece extends React.Component {\n\n\tshouldComponentUpdate(nextProps) {\n\t\treturn (nextProps.x !== this.props.x || nextProps.y !== this.props.y || nextProps.pieceType !== this.props.pieceType || nextProps.squareSize !== this.props.squareSize);\n\t}\n\n\trender() {\n\t\tlet scale = this.props.squareSize / 45; // coordinates for drawings are based on square size of 45\n\t\tlet transformString = 'translate(' + this.props.x + ',' + this.props.y + ') scale(' + scale + ')';\n\t\treturn this.props.drawPiece(transformString);\n\t}\n}\n\n// TODO: remove pieceType, only check to see if drawPiece has changed in shouldComponentUpdate\nPiece.propTypes = {\n\tdrawPiece: PropTypes.func.isRequired,\n\tpieceType: PropTypes.string.isRequired,\n\tsquareSize: PropTypes.number.isRequired,\n\tx: PropTypes.number.isRequired,\n\ty: PropTypes.number.isRequired,\n\t/** recognized piece types: K,Q,R,B,N,P,k,q,r,b,n,p */\n};\n\nexport default Piece;\n","import React from 'react';\n\n/*\n\nMIT License\n\nCopyright (c) 2016 Judd Niemann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Attribution:\n// SVG data for pieces adapted from here: https://commons.wikimedia.org/wiki/File:Chess_Pieces_Sprite.svg\n//\n// Modifications by J.Niemann:\n// 1. converted into react component format\n// 2. Styles separated into Stylesheet\n// 3. Changed white lines (curves) on Black Queen\n// 4. Made Black Knight's mouth open a little wider\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/*\n * ================================================================================================\n Modified by Andrew Benbow in 2020 for use in the Rudrata web app\n 1. Removed all piece definitions other than the white knight and the muted square\n 2. Modified existing piece definitions to utilize the Font Awesome chessKnight svg path\n 3. Modified blanked square color\n * ================================================================================================\n */\n\n\n\n\nconst pieceDefs = {\n\t'N': (transformString) => {\n\t\treturn (\n\t\t\t <svg>\n\t\t\t\t{/* white knight */}\n\t\t\t\t<g className=\"g_4\" transform={transformString}>\n\n      <path transform='scale(.08), translate(90, 20)' fill=\"white\" d=\"M19 272.47l40.63 18.06a32 32 0 0 0 24.88.47l12.78-5.12a32 32 0 0 0 18.76-20.5l9.22-30.65a24 24 0 0 1 12.55-15.65L159.94 208v50.33a48 48 0 0 1-26.53 42.94l-57.22 28.65A80 80 0 0 0 32 401.48V416h319.86V224c0-106-85.92-192-191.92-192H12A12 12 0 0 0 0 44a16.9 16.9 0 0 0 1.79 7.58L16 80l-9 9a24 24 0 0 0-7 17v137.21a32 32 0 0 0 19 29.26zM52 128a20 20 0 1 1-20 20 20 20 0 0 1 20-20zm316 320H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h352a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z\"></path>\n\n\t\t\t\t</g>\n\t\t\t</svg>\n\t\t);\n\t},\n\t'-': (transformString) => {\n\t\treturn (\n      <svg>\n        {/* blanked square */}\n        <g transform={transformString}>\n          <rect x=\"0\" y=\"0\" width={45} height={45} fill=\"#2c3e50\" fillOpacity=\"0.8\" />\n        </g>\n      </svg>\n\t\t);\n\t}\n};\n\nexport default pieceDefs;\n","/*\n\nMIT License\n\nCopyright (c) 2016 Judd Niemann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n////////////////////////////////////////////////////////////////////////////////////\n// Modified in 2020 by Andrew Benbow for use in the Rudrata web app\n// 1. Changed the event listener events to window events to escape an esLint error\n// 2. Updated highlight select color to reflect Rudrata's built in styles\n// 3. Updated the componentWillReceiveProps method to be compliant with react 16x\n// 4. Changed the styling on the SVG container to allow for a more dynamic container size\n// 5. Changed isDragging prop to constantly remain false to remove a visual bug\n///////////////////////////////////////////////////////////////////////////////////\n\n\n\nimport React, { Component } from 'react';\nimport Board from './board.js';\nimport Piece from './piece.js';\nimport standardPieceDefinitions from './pieceDefinitions.js';\nimport PropTypes from 'prop-types';\n\n\n/** BoardContainer : handles user input and draws a chess diagram consisting of\n* a board and pieces, using svg graphics */\nclass BoardContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselectedSquare: null,\n\t\t\tselectedPieceType: null,\n\t\t\tdragX: 0,\n\t\t\tdragY: 0,\n\t\t\tisDragging: false,\n\t\t\tleft: 0,\n\t\t\ttop: 0,\n\t\t\twidth: 0,\n\t\t\theight: 0,\n\t\t};\n\t\tthis._onResize = this._onResize.bind(this);\n\t\tthis._onScroll = this._onScroll.bind(this);\n\t}\n\n\t// Lifecycle events ////\n\n\tcomponentDidMount() {\n\t\tthis._getClientPos();\n\t\t// add DOM events\n\t\t  window.addEventListener('resize', this._onResize); // resize event not provided by React events; use DOM version\n\t\t  window.addEventListener('scroll', this._onScroll); // Changed to window event\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener('resize', this._onResize); // Changed to window event\n\t\twindow.removeEventListener('scroll', this._onScroll); // Changed to window event\n\t}\n\n\tcomponentDidUpdate (nextProps) {\n\t\tif ( /* changes which have an effect on coordinates */\n\t\t\tnextProps.squareSize !== this.props.squareSize ||\n\t\t\tnextProps.ranks !== this.props.ranks ||\n\t\t\tnextProps.files !== this.props.files\n\t\t) {\n\t\t\tlet evt = new Event('resize');\n\t\t\tdispatchEvent(evt); // synthetically trigger resize event. (Can't get coords in here, because component not rendered yet ...)\n\t\t}\n\t}\n\n\t// event handling ////\n\n\t// DOM events\n\t_onResize() {\n\t\tthis._getClientPos();\n\t}\n\n\t_onScroll() {\n\t\tthis._getClientPos();\n\t}\n\n\t// react events\n\t_onMouseDown(evt) { // react event\n\t\tevt.preventDefault();\n\t\tlet x = evt.clientX - this.state.left;\n\t\tlet y = evt.clientY - this.state.top;\n\t\tthis._grab(x,y);\n\t}\n\n\t_onTouchStart(evt) {\n\t\tevt.preventDefault();\n\t\tlet x = evt.touches[0].clientX - this.state.left;\n\t\tlet y = evt.touches[0].clientY - this.state.top;\n\t\tthis._grab(x,y);\n\t}\n\n\t_onMouseMove(evt) {\n\t\tevt.preventDefault();\n\t\tlet x = evt.clientX - this.state.left;\n\t\tlet y = evt.clientY - this.state.top;\n\t\tthis._move(x,y);\n\t}\n\n\t_onTouchMove(evt) {\n\t\tevt.preventDefault();\n\t\tlet x = evt.touches[0].clientX - this.state.left;\n\t\tlet y = evt.touches[0].clientY - this.state.top;\n\t\tthis._move(x,y);\n\t}\n\n\t_onMouseUp(evt) {\n\t\tevt.preventDefault();\n\t\tlet x = evt.clientX - this.state.left;\n\t\tlet y = evt.clientY - this.state.top;\n\t\tthis._release(x,y);\n\t}\n\n\t_onTouchEnd(evt) {\n\t\tevt.preventDefault();\n\t\t/* // Note: android doesn't populate touches array on touchend\n\t\tlet x = evt.touches[0].clientX - this.state.left;\n\t\tlet y = evt.touches[0].clientY - this.state.top;\n\t\t*/\n\t\tlet [x,y] = [this.state.dragX, this.state.dragY];\n\n\t\tthis._release(x,y);\n\t}\n\n\t// coordinate conversion functions ////\n\n\t_squareToCoords(square) { // convert a square name (eg 'e4') to coordinates\n\t\tif(this.props.flip) {\n\t\t\tlet x = this.props.squareSize * (this.props.files - (square.toLowerCase().charCodeAt(0)-97));\n\t\t\tlet y = (Number(square.slice(1))-1) * this.props.squareSize;\n\t\t\treturn [x,y];\n\t\t} else {\n\t\t\tlet x = this.props.squareSize * (1 + square.toLowerCase().charCodeAt(0)-97);\n\t\t\tlet y = (this.props.ranks-Number(square.slice(1))) * this.props.squareSize;\n\t\t\treturn [x,y];\n\t\t}\n\t}\n\n\t_fileRankToCoords(file, rank) { // convert zero-based file and rank values to coordinates\n\t\tif(this.props.flip) {\n\t\t\tlet\tx = this.props.squareSize * (this.props.files - file);\n\t\t\tlet y = this.props.squareSize * rank;\n\t\t\treturn [x,y];\n\t\t} else {\n\t\t\tlet\tx = this.props.squareSize * (1 + file);\n\t\t\tlet y = this.props.squareSize * (this.props.ranks - rank -1);\n\t\t\treturn [x,y];\n\t\t}\n\t}\n\n\t_coordsToSquare(x,y) { // convert coordinates to square name (eg e4)\n\t\tif(this.props.flip) {\n\t\t\tlet file = String.fromCharCode(97 + this.props.files - x / this.props.squareSize + 1);\n\t\t\tlet rank = 1 + Math.floor(y / this.props.squareSize);\n\t\t\treturn file + rank;\n\t\t} else {\n\t\t\tlet file = String.fromCharCode(97 + x / this.props.squareSize - 1);\n\t\t\tlet rank = 1 + Math.floor((this.props.ranks * this.props.squareSize - y) / this.props.squareSize);\n\t\t\treturn file + rank;\n\t\t}\n\t}\n\n\t// private actions\n\n\t_grab(x,y) {\n\t\tlet boardW = this.props.squareSize * (1+this.props.files);\n\t\tlet boardH = this.props.squareSize * (this.props.ranks);\n\t\tif(x < this.props.squareSize || x > boardW || y < 0 || y > boardH) {\n\t\t\t//outside the board ...\n\t\t\treturn false;\n\t\t}\n\t\tlet selectedSquare = this._coordsToSquare(x,y);\n\t\tlet selectedPiece = this._getPieceAtSquare(selectedSquare);\n\t\tif (!this.state.selectedSquare || this.state.selectedSquare === selectedSquare) {\n\t\t\tthis.setState({\n\t\t\t\tselectedSquare: selectedSquare,\n\t\t\t\tselectedPieceType: selectedPiece ? selectedPiece.pieceType : null,\n\t\t\t\tdragX: selectedPiece ? selectedPiece.x + this.props.squareSize / 2: this.state.dragX,\n\t\t\t\tdragY: selectedPiece ? selectedPiece.y + this.props.squareSize / 2: this.state.dragY,\n\t\t\t\tisDragging: false\n\t\t\t});\n\t\t}\n\n\t\tif(this.props.onSelectSquare) {\n\t\t\tthis.props.onSelectSquare(selectedSquare);\n\t\t}\n\t}\n\n\t_move(x, y) {\n\t\tif(this.state.isDragging) {\n\t\t\tthis.setState({dragX: x, dragY: y});\n\t\t}\n\t}\n\n\t_release(x,y) {\n\t\tthis.setState({isDragging: false});\n\t\tlet finalSquare = this._coordsToSquare(x,y);\n\t\tif(finalSquare !== this.state.selectedSquare) {\n\t\t\tif(this.props.onMovePiece) { // call the callback fn\n\t\t\t\tthis.props.onMovePiece(this.state.selectedPieceType, this.state.selectedSquare, finalSquare);\n\t\t\t}\n\t\t\tthis.setState({selectedSquare: null});\n\t\t}\n\t}\n\n\t// self-enquiry ////\n\n\t_getClientPos() {\n\t\tlet rect = this.Client.getBoundingClientRect();\n\t\tthis.setState({left: rect.left, top: rect.top, width: rect.width, height: rect.height});\n\t}\n\n\t_getPieces() {\n\t\tif(!this.props.pieces)\n\t\t\treturn [];\n\n\t\treturn this.props.pieces.map((pieceString) => {\n\t\t\tlet [pieceType, square ] = pieceString.split('@',2);\t// split 'piece@square' into pieceType, square\n\t\t\tif(!square)\n\t\t\t\treturn {pieceType: 'invalid', square: 'none', x: 0,y: 0}; // guard against nonsense input\n\t\t\tlet [x,y] = this._squareToCoords(square);\n\t\t\tif (isNaN(y))\n\t\t\t\treturn {pieceType: 'invalid', square: 'none', x: 0,y: 0}; // invalid y-coordinate\n\t\t\treturn {pieceType: pieceType, square: square.toLowerCase(), x: x, y: y};\n\t\t});\n\t}\n\n\t_getPiecesFromFEN() {\n\t\tlet fields = this.props.fen.split(\" \", 6);\n\t\tconst pieceDefinitions = Object.assign(standardPieceDefinitions, this.props.pieceDefinitions);\n\t\tconst pieceChars = new RegExp('[' + Object.keys(pieceDefinitions).join('').replace('-', '\\\\-') + ']');\n\t\tconst splitFen = fields[0].replace(/(\\d+|\\w|\\/)(?!$)/g, '$1,').split(',');\n\t\treturn splitFen\n\t\t\t.reduce((accum, c) => {\n\t\t\t\tif(pieceChars.test(c)) {\n\t\t\t\t\tlet [x,y] = this._fileRankToCoords(accum.file, accum.rank);\n\t\t\t\t\tlet square = String.fromCharCode(97 + accum.file) + (accum.rank + 1).toString();\n\t\t\t\t\taccum.pieces.push({pieceType: c, square: square, x: x, y: y});\n\t\t\t\t\taccum.file++;\n\t\t\t\t} else if (c === \"/\") {\n\t\t\t\t\taccum.rank -= 1;\n\t\t\t\t\taccum.file = 0;\n\t\t\t\t}\telse if(Number.isInteger(parseInt(c))) {\n\t\t\t\t\taccum.file += Number(c);\n\t\t\t\t}\n\t\t\t\treturn accum;\n\t\t\t}, {\n\t\t\t\trank: this.props.ranks-1,\n\t\t\t\tfile: 0,\n\t\t\t\tpieces: []\n\t\t\t})\n\t\t\t.pieces;\n\t}\n\n\t_getPieceAtSquare(square) {\n\t\tlet pieces = this.props.fen ? this._getPiecesFromFEN() : this._getPieces();\n\t\treturn pieces.filter(pieceLocation => pieceLocation.square === square)[0];\n\t}\n\n\t// render function\n\n\trender() {\n\t\tlet pieces = this.props.fen ? this._getPiecesFromFEN() : this._getPieces();\n\t\tconst pieceDefinitions = Object.assign(standardPieceDefinitions, this.props.pieceDefinitions);\n\t\tconst highlights = {};\n\t\tif (this.state.selectedSquare) {\n\t\t\thighlights[this.state.selectedSquare] = ''; //Changed\n\t\t}\n\t\treturn (\n           \n\t\t\t\t<svg\n\t\t\t\t\tref={(svg) => {this.Client = svg;}}\n\t\t\t\t\tstyle={{display: 'inline-block', marginBottom: '-15%'}}\n\t\t\t\t\theight={this.props.height === \"auto\" ? (2 + this.props.ranks) * this.props.squareSize : this.props.height}\n\t\t\t\t\tonMouseDown={this._onMouseDown.bind(this)}\n\t\t\t\t\tonMouseMove={this._onMouseMove.bind(this)}\n\t\t\t\t\tonTouchEnd={this._onTouchEnd.bind(this)}\n\t\t\t\t\tonTouchMove={this._onTouchMove.bind(this)}\n\t\t\t\t\tonTouchStart={this._onTouchStart.bind(this)}\n\t\t\t\t\tonMouseUp={this._onMouseUp.bind(this)}\n\t\t\t\t\twidth={this.props.width === \"auto\" ? (2 + this.props.files) * this.props.squareSize : this.props.width}\n\t\t\t\t>\n            \n\n\t\t\t\t\t<Board\n\t\t\t\t\t\tdarkSquareColor={this.props.darkSquareColor}\n\t\t\t\t\t\tfiles={this.props.files}\n\t\t\t\t\t\tflip={!!this.props.flip}\n\t\t\t\t\t\thighlights={highlights}\n\t\t\t\t\t\tlightSquareColor={this.props.lightSquareColor}\n\t\t\t\t\t\tranks={this.props.ranks}\n\t\t\t\t\t\tselectedSquare={this.state.selectedSquare}\n\t\t\t\t\t\tsquareSize={this.props.squareSize}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{pieces.map((piece, i) =>\n\t\t\t\t\t\t<Piece\n\t\t\t\t\t\t\tx={this.state.isDragging && piece.square === this.state.selectedSquare ? this.state.dragX - this.props.squareSize / 2 : piece.x}\n\t\t\t\t\t\t\ty={this.state.isDragging && piece.square === this.state.selectedSquare ? this.state.dragY - this.props.squareSize / 2 : piece.y}\n\t\t\t\t\t\t\tkey={i} pieceType={piece.pieceType} squareSize={this.props.squareSize}\n\t\t\t\t\t\t\tdrawPiece={pieceDefinitions[piece.pieceType]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\n\t\t\t\t</svg>\n\t\t);\n\t}\n}\nBoardContainer.propTypes = {\n\t/** Dictionary of legal moves, to be supplied by server*/\n\tallowedMoves: PropTypes.object,\n\tdarkSquareColor: PropTypes.string,\n\t/** Chess position in FEN format (Forsyth-Edwards Notation). eg \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\" */\n\tfen: PropTypes.string,\n\tfiles: PropTypes.number,\n\t/** if true, rotates the board so that Black pawns are moving up, and White pawns are moving down the board */\n\tflip: PropTypes.bool,\n\t/** height of main svg container in pixels. If setting this manually, it should be at least 9 * squareSize to fit board AND labels*/\n\theight: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t]),\n\tlightSquareColor: PropTypes.string,\n\t/** callback function which is called when user moves a piece. Passes pieceType, initialSquare, finalSquare as parameters to callback */\n\tonMovePiece: PropTypes.func,\n\t/** callback function which is called when user clicks on a square. Passes name of square as parameter to callback */\n\tonSelectSquare: PropTypes.func,\n\t/** array of pieces at particular squares (alternative to fen) eg ['P@f2','P@g2','P@h2','K@g1'].\n\t* This format may be more suitable for unconventional board dimensions, for which standard FEN would not work.\n\t* Note: If both FEN and pieces props are present, FEN will take precedence */\n\tpieces: PropTypes.array,\n\t/** Optional associative array containing non-standard chess characters*/\n\tpieceDefinitions: PropTypes.object,\n\tranks: PropTypes.number,\n\tsquareSize: PropTypes.number,\n\t/** width of main svg container in pixels. If setting this manually, it should be at least 9 * squareSize to fit board AND labels*/\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t]),\n};\n\nBoardContainer.defaultProps = {\n\tallowedMoves: {},\n\tdarkSquareColor:  \"#005EBB\",\n\theight: 'auto',\n\tfiles: 8,\n\tflip: false,\n\tlightSquareColor: \"#2492FF\",\n\tpieceDefinitions: {},\n\tranks: 8,\n\tsquareSize: 45,\n\twidth: 'auto',\n};\n\nexport default BoardContainer;\n","/*\n\nMIT License\n\nCopyright (c) 2016 Judd Niemann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n// chessdiagram.js : defines Chess Diagram Component\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// Modified in 2020 by Andrew Benbow for use in the Rudrata web app\n// 1. Removed the game history import and all references\n// 2. Updated componentWillReceive props to be compliant with react 16x\n///////////////////////////////////////////////////////////////////////////////////////////\n\n\n\nimport React, { Component } from 'react';\nimport BoardContainer from './BoardContainer.js';\nimport PropTypes from 'prop-types';\n\n\n/** Chessdiagram : draws a chess diagram consisting of a board and pieces, using svg graphics */\nclass Chessdiagram extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// If FEN is present, and it is an array, use it for moves\n\t\t// If FEN is present, and it is a string, make it the first element of the moves array.\n\t\t// If FEN is NOT present, and PGN is present, call getFensFromPgn() to generate an array of FENs\n\t\t// If FEN is NOT present, and PGN is NOT present, make first element of moves array an empty string\n\t\tconst moves = props.fen ?\n\t\t\tArray.isArray(props.fen) ? props.fen : [props.fen]\n\t\t\t: props.pgn ? props.getFensFromPgn(props.pgn) : [''];\n\n\t\t// If there is a PGN, set currentMove to this.startMove, otherwise zero.\n\t\tconst currentMove = props.pgn ? this.startMove : 0;\n\t\tthis.state = {\n\t\t\tcurrentMove,\n\t\t\tmoves\n\t\t};\n\t}\n\n\t// Lifecycle events\n\tcomponentDidUpdate(nextProps) {\n\t\tif (nextProps.fen && nextProps.fen !== this.props.fen) {\n\t\t\tthis.setState({currentMove: 0, moves: [nextProps.fen]});\n\t\t}\n\t\tif (nextProps.pgn && nextProps.pgn !== this.props.pgn) {\n\t\t\tthis.setState({currentMove: this.startMove, moves: nextProps.getFensFromPgn(nextProps.pgn)});\n\t\t}\n\t}\n\n\t// event handling ////\n\n\t_onMovePiece(pieceType, from, to) {\n\t\tif (this.props.allowMoves && this.props.onMovePiece) {\n\t\t\tthis.props.onMovePiece(pieceType, from, to);\n\t\t}\n\t}\n\n\t_onMovePgnHead(halfMove) {\n\t\tthis.setState({\n\t\t\tcurrentMove: halfMove\n\t\t});\n\t}\n\n\t// returns halfmove count of the prop startMove ////\n\tget startMove() {\n\t\tlet currentMove;\n\t\tif (typeof this.props.startMove === 'number' || parseInt(this.props.startMove)) {\n\t\t\t// halfMove provided\n\t\t\tcurrentMove = parseInt(this.props.startMove);\n\t\t} else {\n\t\t\t// e.g., 'w12'\n\t\t\tcurrentMove = (parseInt(this.props.startMove.slice(1)) - 1) * 2 + (this.props.startMove[0] === 'w' ? 1 : 2);\n\t\t}\n\t\treturn currentMove;\n\t}\n\n\t// render function\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<BoardContainer\n\t\t\t\t\t{...this.props}\n\t\t\t\t\tfen={this.state.moves[this.state.currentMove]}\n\t\t\t\t\tstyle={{display: 'inline-block'}}\n\t\t\t\t\tonMovePiece={this._onMovePiece.bind(this)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nChessdiagram.propTypes = {\n\t/** Whether to allow the user to make moves on the board (ie, whether to ignore mouse input) */\n\tallowMoves: PropTypes.bool,\n\tdarkSquareColor: PropTypes.string,\n\t/** Fen string to render. Should override  */\n\tfen: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.array\n\t]),\n\tfiles: PropTypes.number,\n\t/** if true, rotates the board so that Black pawns are moving up, and White pawns are moving down the board */\n\tflip: PropTypes.bool,\n\t/** Optional custom callbacks for PGN parsing. should take pgn (string).\n\t*/\n\tgetFensFromPgn: PropTypes.func,\n\tgetHeader: PropTypes.func,\n\tgetMovetext: PropTypes.func,\n\tgetResult: PropTypes.func,\n\t/** Returns an array of arrays, containing [<fullmoveNumber>, <whiteMove> <optionalBlackMove>] */\n\tgetRows: PropTypes.func,\n\t/** height of main svg container in pixels. If setting this manually, it should be at least 9 * squareSize to fit board AND labels*/\n\theight: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t]),\n\tlightSquareColor: PropTypes.string,\n\t/** Pgn line separator. Defaults to '\\r?\\n'*/\n\tnewlineChar: PropTypes.string,\n\t/** callback function which is called when user moves a piece. Passes pieceType, initialSquare, finalSquare as parameters to callback */\n\tonMovePiece: PropTypes.func,\n\t/** callback function which is called when user clicks on a square. Passes name of square as parameter to callback */\n\tonSelectSquare: PropTypes.func,\n\t/** String representation of a PGN. Note that chess.js can't handle templates,\n\t* so if you'd like to pass templates you'll need a custom getNthMove callback.*/\n\tpgn: PropTypes.string,\n\t/** Height of pgn viewer component */\n\tpgnHeight: PropTypes.number,\n\t/** array of pieces at particular squares (alternative to fen) eg ['P@f2','P@g2','P@h2','K@g1'].\n\t* This format may be more suitable for unconventional board dimensions, for which standard FEN would not work.\n\t* Note: If both FEN and pieces props are present, FEN will take precedence */\n\tpieces: PropTypes.array,\n\t/** Optional associative array containing non-standard chess characters*/\n\tpieceDefinitions: PropTypes.object,\n\tranks: PropTypes.number,\n\t/** size of the squares in pixels */\n\tsquareSize: PropTypes.number,\n\t// Which move to start the game on. Either halfmove count or letter followed by full move eg w12 //\n\tstartMove: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number\n\t]),\n\t/** Chess position in FEN format (Forsyth-Edwards Notation). eg \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\" */\n\tstartPosition: PropTypes.string,\n\t/** width of main svg container in pixels. If setting this manually, it should be at least 9 * squareSize to fit board AND labels*/\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t]),\n};\n\nChessdiagram.defaultProps = {\n\tallowMoves: true,\n\tdarkSquareColor:  \"#005EBB\",\n\theight: 'auto',\n\tfiles: 8,\n\tflip: false,\n\tlightSquareColor: \"#2492FF\",\n\tnewlineChar: '\\r?\\n',\n\tpieceDefinitions: {},\n\tpgnHeight: 400,\n\tranks: 8,\n\tstartMove: 0,\n\tsquareSize: 45,\n\twidth: 'auto',\n};\n\n\nexport default Chessdiagram;\n","import React, { PureComponent } from \"react\";\nimport \"bootswatch/dist/flatly/bootstrap.min.css\";\nimport HowTo from \"./components/HowTo/HowTo.js\";\nimport Score from \"./components/Score/Socre.js\";\nimport CreatedBy from \"./components/CreatedBy/CreatedBy.js\";\nimport Win from \"./components/Win/Win.js\";\n\n\n// Standard import for custom css\nimport \"./App.css\";\n\n// React-bootstrap import\nimport {\n  Button,\n  Row,\n  Col,\n  Container,\n  ButtonToolbar,\n  Dropdown,\n} from \"react-bootstrap\";\n\n// Custom Chess Diagram Import\nimport Chessdiagram from \"./components/rudrata-chess-diagram/chessdiagram\";\n\n// Import react-measure\nimport Measure from \"react-measure\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowRight, faPiggyBank, faCode } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      order: 8,\n      diagramDimensions: { width: -1 },\n      seqNumber: 0,\n      tourSeq: [],\n      helpAltBackground: false,\n      currentScore: 0,\n    };\n\n    this.handleClear = this.handleClear.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleHowTo = this.handleHowTo.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  // Processes incoming moves (\"e4\", \"a5\", \"b8\", etc.) and decides whether or not users are allowed to move the knight to them\n  handleMove(move) {\n    const { tourSeq } = this.state;\n\n    // Checks to see if the tour has already visited this square\n    if (tourSeq.includes(move) === false) {\n      \n      //Checks to see if the tour hasn't even begun yet\n      if (this.state.seqNumber === 0) {\n        \n        //First moves are simply placed where the user clicks\n        return this.placeKnight(move);\n      } else {\n        \n        // If we have gotten to here, that means that there must be at least one move in the sequence, so we assign it to this constant\n        const prevMove = tourSeq.slice().pop();\n\n        // Both the current move and the previous move is fed in to the checkLegalMove method which returns true or false\n        if (this.checkLegalMove(move, prevMove) === true) {\n         \n          // Legal moves are executed\n          return this.placeKnight(move);\n        } else {\n          \n          // Illegal moves are simply ignored\n          return null;\n        }\n      }\n    }\n  }\n\n  // The how to section has a simple method for handling changing its className to trigger a short CSS transition when a user clicks the how to link\n  // This method also has a scrollIntoView call that brings users down to the how to information\n  handleHowTo() {\n    \n    // Shows the users the how to information when clicked\n    const howto = document.querySelector(\"#how-to\");\n    howto.scrollIntoView();\n\n    // When set to true, helpAltBackground will change some className information on the how to component, which triggers a CSS animation\n    this.setState((state) => ({\n      helpAltBackground: !state.helpAltBackground,\n    }));\n\n    // After 5 seconds, the state is witched back to false.\n    return setTimeout(() => {\n      this.setState((state) => ({\n        helpAltBackground: !state.helpAltBackground,\n      }));\n    }, 5000);\n  }\n\n  // This function iterates through all of the possible moves a knight can take and attempts to figure out if the requested move is possible\n  checkLegalMove(move, prevMove) {\n    const legalMoves = [\n      [2, 1],\n      [2, -1],\n      [-2, 1],\n      [-2, -1],\n      [1, 2],\n      [1, -2],\n      [-1, 2],\n      [-1, -2],\n    ];\n    const ranks = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n\n    // This regular expression is built to find the files (numbers) of the moves passed into this function\n    const files_re = /(\\d{1,})/;\n\n    // Declares a block of variables used for storing the various ranks and files of each move being processed\n    const move_x = ranks.indexOf(move[0]) + 1;\n    const move_y = parseInt(move.split(files_re)[1]);\n    const prevMove_x = ranks.indexOf(prevMove[0]) + 1;\n    const prevMove_y = parseInt(prevMove.split(files_re)[1]);\n    \n    // A temporary boolean that is set to false, but will be switched to true if the move requested is legal.\n    let isLegal = false;\n\n    // Loops through all of the possible moves the knight can take and decides whether or not the requested move is possible\n    // Operates in linear time in a worse case scenario (the user clicks on a spot that is impossible to move to), but will break early if a legal move is found.\n    for (let i in legalMoves) {\n      \n      if (\n        prevMove_x + legalMoves[i][0] === move_x &&\n        prevMove_y + legalMoves[i][1] === move_y\n      ) {\n        \n        // Breaks the loop as soon as a move is found\n        return isLegal = true;\n      } else {\n        continue;\n      }\n    }\n\n    return isLegal;\n  }\n\n  // A simple method for appending the knight's position to an array held in the state, thus updating the chess board and what it displays\n  placeKnight(move) {\n    let sequence = this.state.tourSeq.slice();\n    sequence.push(move);\n    return this.setState((state) => ({\n      tourSeq: sequence,\n      seqNumber: (state.seqNumber += 1),\n      currentScore: (state.currentScore += 1),\n    }));\n  }\n\n\n  // Resets the entire chess board using setState\n  handleClear() {\n    return this.setState({ tourSeq: [], seqNumber: 0, currentScore: 0 });\n  }\n\n  // This method is called each time the user changes the chess board size\n  // Method clears the chess board, and take the incomming event data and processes it to find out the new chess board size\n  handleUpdate(event) {\n    this.handleClear();\n    const order = event.target.attributes['data-order'].value;\n\n    return this.setState({order: order});\n    \n  }\n\n  render() {\n    const {\n      order,\n      diagramDimensions,\n      seqNumber,\n      tourSeq,\n      currentScore,\n    } = this.state;\n\n  \n    // This code block is used to build the positionDescriptor, a simple array containing the position of all of the blanked squares, and the knight.\n    let lastSquareName = tourSeq[seqNumber - 1];\n    let positionDescriptor = tourSeq.map((sq) => \"-@\" + sq);\n    if (lastSquareName) positionDescriptor.push(\"N@\" + lastSquareName); \n\n    return (\n      <React.Fragment>\n        <Row>\n          <Col col={12}>\n        {/* A win condition that displays a fun visual effect */}\n        {seqNumber === Math.pow(order, 2) && <Win />}\n\n        {/* The website header */}\n        <header id=\"rudrata-header\">\n          <Container fluid className=\"d-flex justify-content-around mb-5\">\n            <Row>\n              <Col className=\"mr-5\">\n                <h1 className=\"display-2 text-center\">Rudrata</h1>\n                <p className='text-center'>Visit each square on the chess board!</p>\n                <button\n                  className=\" font-weight-bold btn-link btn mb-2 mt-2\"\n                  onClick={this.handleHowTo}\n                >\n                  How To Play <FontAwesomeIcon icon={faArrowRight} />\n                </button>\n              </Col>\n\n              <Col>\n              {/* A simple score keeping component  */}\n                <Row>\n                  <Score currentScore={currentScore} order={order} />\n                </Row>\n\n                <ButtonToolbar className=\"d-flex col-12 flex-column justify-content-around\">\n                  <Row>\n                    {/* New game button */}\n                    <Button\n                      size=\"lg\"\n                      className=\"mt-3 btn-block\"\n                      variant=\"success\"\n                      onClick={this.handleClear}\n                    >\n                      New Game\n                    </Button>\n                  </Row>\n\n                  <Row>\n                    {/* A dropdown that allows users to choose their preferred difficulty */}\n                    <Dropdown block='true' className=\"mt-3 btn-block w-100\">\n                      <Dropdown.Toggle block='true' size=\"lg\" variant=\"success\">\n                        Chess Board Size\n                      </Dropdown.Toggle>\n\n                      <Dropdown.Menu>\n                        <Dropdown.Item\n                          data-order={5}\n                          className=\"text-success difficulty-dd\"\n                          onClick={(event) => {\n                            this.handleUpdate(event);\n                          }}\n                        >\n                          5x5 (easy)\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          data-order={6}\n                          className=\"text-success difficulty-dd\"\n                          onClick={(event) => {\n                            this.handleUpdate(event);\n                          }}\n                        >\n                          6x6{\" \"}\n                        </Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item\n                          data-order={7}\n                          className=\"text-warning difficulty-dd\"\n                          onClick={(event) => {\n                            this.handleUpdate(event);\n                          }}\n                        >\n                          7x7 (intermediate)\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          data-order={8}\n                          className=\"text-warning difficulty-dd\"\n                          onClick={(event) => {\n                            this.handleUpdate(event);\n                          }}\n                        >\n                          8x8 (default)\n                        </Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item\n                          data-order={9}\n                          className=\"text-danger difficulty-dd\"\n                          onClick={(event) => {\n                            this.handleUpdate(event);\n                          }}\n                        >\n                          9x9 (difficult)\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          data-order={10}\n                          className=\"text-danger difficulty-dd\"\n                          onClick={(event) => {\n                            this.handleUpdate(event);\n                          }}\n                        >\n                          10x10{\" \"}\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Row>\n                </ButtonToolbar>\n              </Col>\n            </Row>\n          </Container>\n        </header>\n\n        {/* This section contains the chess board object */}\n        <section id=\"chessboard\">\n          <Measure\n            bounds\n            onResize={(contentRect) => {\n              this.setState({ diagramDimensions: contentRect.bounds });\n            }}\n          >\n            {({ measureRef }) => (\n              <div ref={measureRef} className=\"d-flex justify-content-center\">\n                <Chessdiagram\n                  allowMoves={false}\n                  squareSize={\n                    measureRef\n                      ? Math.min(80, (1 * diagramDimensions.width) / order)\n                      : 45\n                  }\n                  files={parseInt(order)}\n                  ranks={parseInt(order)}\n                  pieces={positionDescriptor}\n                  onSelectSquare={(name) => this.handleMove(name)}\n                  lightSquareColor=\"#F0EBD8\"\n                  darkSquareColor=\"#A38D7B\"\n                />\n              </div>\n            )}\n          </Measure>\n        </section>\n        <br />\n\n\n        {/* How To section */}\n        <section id=\"how-to-section\">\n          <HowTo altBackground={this.state.helpAltBackground} />\n        </section>\n        <hr className=\"w-50\" />\n\n\n        {/* Created By Information */}          \n        <section id=\"created-by-section\">\n          <CreatedBy />\n        </section>\n\n       {/* This section contains some links out of website back to the project's GitHub page and a donation link */}\n        <section\n          id=\"button-section\"\n          className=\"d-flex flex-row justify-content-center\"\n        >\n          <ButtonToolbar role='navigation'>\n          <a\n            className=\"btn btn-primary btn-lg mr-1\"\n            href=\"https://www.paypal.com/donate?hosted_button_id=3972H6RJEYDVW\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <FontAwesomeIcon className=\"mr-2\" icon={faPiggyBank} />\n            Donate\n          </a>\n\n          <a\n          className='btn btn-primary btn-lg ml-1'\n          href='https://github.com/OulipianSummer/rudrata'\n          target='_blank'\n          rel='noreferrer'\n          ><FontAwesomeIcon icon={faCode}/> View On GitHub</a>\n          </ButtonToolbar>\n\n        </section>\n        <hr className=\"w-50\" />\n\n        {/* This section contains a simple privacy policy that simply states that this app can't track users or store user data. */}\n        <section id=\"tos\" className=\"d-flex flex-row justify-content-center\">\n          <p>\n            Rudrata does not store or process any personal data, period. It\n            simply does not have the capability to track you or store your\n            personal data. But, for important legal reasons, this website still\n            needs a{\" \"}\n            <a\n              href=\"https://www.termsfeed.com/live/86855bbe-e5f0-4b57-a4a4-8319222cfcb6\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Privacy Policy\n            </a>\n            .\n          </p>\n        </section>\n        </Col>\n        </Row>\n      </React.Fragment>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}